server:
    port: 9080
spring:
    security:
        user:
            name: user
            password: password
    datasource:
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3306/research-boot?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=UTF-8&useSSL=false
        username: root
        password: 336699ccff
        sql-script-encoding: UTF-8
        druid:
            initial-size: 0
            max-active: 8
            min-idle: 0
            max-wait: -1
            not-full-timeout-retry-count: 0
            validation-query: SELECT 1
            validation-query-timeout: -1
            test-while-idle: true
            test-on-borrow: false
            test-on-return: false
            time-between-eviction-runs-millis: 60000
            time-between-connect-error-millis: 500
            min-evictable-idle-time-millis: 1800000
            max-evictable-idle-time-millis: 25200000
            phy-timeout-millis: -1
            pool-prepared-statements: false
            share-prepared-statements: false
            max-pool-prepared-statement-per-connection-size: 10
            use-global-data-source-stat: false
            stat:
                ## 是否开启 StatFilter，默认 true，可以不写（https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_StatFilter）
                enabled: true
                ## 数据库类型
                db-type:
                ## 是否开启慢查询统计
                log-slow-sql: false
                ## 慢查询的定义
                slow-sql-millis: 3000
                ## 是否开启合并参数化 SQL
                merge-sql: false
                ## 是否开启连接的堆栈信息
                connection-stack-trace-enable: false
            slf4j:
                ## 是否开启 StatFilter，默认 false（https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_LogFilter）
                enabled: true
                ## datasource log 的总开关，前置条件：druid.sql.DataSource 的日志级别为 debug
                ## 无调用者
                data-source-log-enabled: true
                ## connection log 的总开关，前置条件：druid.sql.Connection 的日志级别为 debug
                connection-log-enabled: true
                ## connection error log 的总开关，前置条件：druid.sql.Connection 的日志级别为 debug
                ## 无调用者
                connection-log-error-enabled: true
                ### 无调用者
                connection-connect-before-log-enabled: true
                ### {conn-410001} connected
                ### {conn-410001} pool-connect
                connection-connect-after-log-enabled: true
                ### {conn-410001} pool-recycle
                ### {conn-410001} closed
                connection-close-after-log-enabled: true
                ### 无调用者
                connection-commit-after-log-enabled: true
                ### 无调用者
                connection-rollback-after-log-enabled: true
                ## statement log 的总开关，前置条件：druid.sql.Statement 的日志级别为 debug
                statement-log-enabled: true
                ## statement sql 输出选项，可以开启多个
                statement-sql-format-option:
                    ### 关键字大写
                    upp-case: false
                    ### 表名不敏感
                    desensitize: false
                    ### 格式化
                    pretty-format: true
                    ### 参数化，column=?
                    parameterized: false
                ## statement sql 格式化选项
                statement-sql-pretty-format: true
                ### {conn-410001, pstmt-420002} created. $sql
                statement-create-after-log-enabled: true
                ### {conn-410001, pstmt-420002} Parameters :[]
                ### {conn-410001, pstmt-420002} Types :[]
                statement-parameter-set-log-enabled: true
                ### {conn-410001, pstmt-420002} executed. $executable-sql
                statement-executable-sql-log-enable: false
                ### {conn-410001, pstmt-420002} executed. 2.073044 millis. $sql
                statement-execute-after-log-enabled: true
                ### {conn-410001, pstmt-420002} closed
                statement-close-after-log-enabled: true
                ### 无调用者，LogFilter#isStatementPrepareAfterLogEnabled
                statement-prepare-after-log-enabled: true
                ### 无调用者，LogFilter#isStatementPrepareCallAfterLogEnabled
                statement-prepare-call-after-log-enabled: true
                ### 无调用者，LogFilter#isStatementExecuteQueryAfterLogEnabled
                statement-execute-query-after-log-enabled: true
                ### 无调用者，LogFilter#isStatementExecuteUpdateAfterLogEnabled
                statement-execute-update-after-log-enabled: true
                ### 无调用者，LogFilter#isStatementExecuteBatchAfterLogEnabled
                statement-execute-batch-after-log-enabled: true
                ### {conn-410001, pstmt-420002} clearParameters.
                statement-parameter-clear-log-enable: true
                ## result-set log 的总开关，前置条件：druid.sql.ResultSet 的日志级别为 debug
                result-set-log-enabled: true
                ### {conn-410001, pstmt-420000, rs-450000} open
                ### {conn-410001, pstmt-420000, rs-450000} Header: []
                result-set-open-after-log-enabled: true
                ### {conn-410001, pstmt-420000, rs-450000} Result: []
                result-set-next-after-log-enabled: true
                ### {conn-410001, pstmt-420000, rs-450000} closed
                result-set-close-after-log-enabled: true
                ## statement error log 的总开关
                ## {conn-410001, pstmt-420002} executed error.
                statement-log-error-enabled: true
                ## result-set error log 的总开关
                ## 无调用者，LogFilter#isResultSetLogErrorEnabled
                result-set-log-error-enabled: true
            wall:
                ## 是否开启 WallFilter，默认 false（https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE-wallfilter）
                enabled: true
                ## 数据库类型
                db-type: h2
                ## 检测到攻击 SQL 时输出错误日志，默认 false
                log-violation: true
                ## 检测到攻击 SQL 时抛出异常，默认 true
                throw-exception: false
                ## WallFilter 自定义配置
                config:
                    ### 检查 delete 语句是否不包含 where 条件
                    delete-where-none-check: true
            config:
                ## 是否开启 ConfigFilter，默认 false（https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter）
                enabled: true
            aop-stat:
                ## 是否开启 DruidStatInterceptor，默认 false
                enabled: false
                patterns:
                    - com.github.trang.*
            web-stat:
                ## 是否开启 WebStatFilter，默认 false（https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_%E9%85%8D%E7%BD%AEWebStatFilter）
                enabled: false
            stat-view-servlet:
                ## 是否开启 StatViewServlet，默认 false（https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_StatViewServlet%E9%85%8D%E7%BD%AE）
                enabled: true
                ## 登陆用户名
                login-username: druid
                ## 登陆密码
                login-password: druid
